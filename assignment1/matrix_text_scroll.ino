#include "LedControl.h"

#define MATRIX_SIZE 8

/**
 * pin 12 is connected to DataIn
 * pin 11 is connected to CLK
 * pin 10 is connected to LOAD
 */
LedControl leds = LedControl(10, 9, 8, 1);

#define A {B00000000, B00111100, B01000010, B01000010, B01111110, B01000010, B01000010, B01000010}

#define B {B00000000, B01111100, B01000010, B01111100, B01000010, B01000010, B01000010, B01111100}

#define C {B00000000, B00111100, B01000010, B01000000, B01000000, B01000010, B01000010, B00111100}

#define D {B00000000, B01111100, B01000010, B01000010, B01000010, B01000010, B01000010, B01111100}

#define E {B00000000, B01111110, B01000000, B01000000, B01111110, B01000000, B01000000, B01111110}

#define F {B00000000, B01111110, B01000000, B01000000, B01111110, B01000000, B01000000, B01000000}

#define G {B00000000, B00111100, B01000010, B01000000, B01000000, B01001110, B01000010, B00111100}

#define H {B00000000, B01000010, B01000010, B01000010, B01111110, B01000010, B01000010, B01000010}

#define I {B00000000, B00010000, B00000000, B00010000, B00010000, B00010000, B00010000, B00010000}

#define J {B00000000, B00000100, B00000100, B00000100, B00000100, B01000100, B01000100, B00111000}

#define K {B00000000, B01000010, B01000100, B01001000, B01110000, B01001000, B01000100, B01000010}

#define L {B00000000, B01000000, B01000000, B01000000, B01000000, B01000000, B01000000, B01111110}

#define M {B00000000, B01000010, B01100110, B01011010, B01000010, B01000010, B01000010, B01000010}

#define N {B00000000, B00000000, B01000010, B01100010, B01010010, B01001010, B01000110, B01000010}

#define O {B00000000, B00111100, B01000010, B01000010, B01000010, B01000010, B01000010, B00111100}

#define P {B00000000, B01111100, B01000010, B01000010, B01111100, B01000000, B01000000, B01000000}

#define Q {B00000000, B00111100, B01000010, B01000010, B01000010, B01001010, B01000100, B00111010}

#define R {B00000000, B01111100, B01000010, B01000010, B01111100, B01001000, B01000100, B01000010}

#define S {B00000000, B00111100, B01000010, B01000000, B00111100, B00000010, B01000010, B00111100}

#define T {B00000000, B01111100, B00010000, B00010000, B00010000, B00010000, B00010000, B00010000}

#define U {B00000000, B01000010, B01000010, B01000010, B01000010, B01000010, B01000010, B00111100}

#define V {B00000000, B01000010, B01000010, B01000010, B01000010, B01000010, B00100100, B00011000}

#define W {B00000000, B01000010, B01000010, B01000010, B01000010, B01011010, B01100110, B01000010}

#define X {B00000000, B00000000, B01000010, B00100100, B00011000, B00011000, B00100100, B01000010}

#define Y {B00000000, B00000000, B01000010, B00100100, B00011000, B00010000, B00100000, B01000000}

#define Z {B00000000, B01111110, B00000010, B00000100, B00001000, B00010000, B00100000, B01111110}

#define AELIG {B00000000, B00111110, B01001000, B01001000, B01111110, B01001000, B01001000, B01001110}

#define OSLASH {B00000000, B00011001, B00100110, B01000110, B01001010, B01010010, B00100100, B01011000}

#define ARING {B00011000, B00000000, B00111100, B01000010, B01000010, B01111110, B01000010, B01000010}

static const int SPACE[] = {B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000};

static const int ALPHABET[][8] = {A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AELIG, OSLASH, ARING};

void setup() {
  leds.shutdown(0, false);
  leds.setIntensity(0, 1);
  leds.clearDisplay(0);
  Serial.begin(9600);
}

void loop() {
  if (Serial.available() > 0) {
    char c = Serial.read();
    drawFigure(getChar(c));
  } else {
    leds.clearDisplay(0);
  }
}

const int *getChar(char character) {
  int value = (int) character;
  if (value >= 0x62 && value <= 0x7A) {
    value = value ^ 0x20;
  }
  int index = value - 0x41;
  if (value == 0x20 || index > (sizeof(ALPHABET) / 16) - 1) {
    return SPACE;
  }
  return ALPHABET[index];
}

void drawFigure(const int figure[]) {

  for (int offset = 8; offset > 0; offset--) {
    drawFigureRight(figure, offset);
    delay(50);
  }
  for (int offset = 0; offset <= 8; offset++) {
    drawFigureLeft(figure, offset);
    delay(50);
  }
}

void drawFigureLeft(const int figure[], int offset) {
  for (int i = 0; i < MATRIX_SIZE; i++) {
      leds.setRow(0, i, figure[i] << offset);
    }
}

void drawFigureRight(const int figure[], int offset) {
  for (int i = 0; i < MATRIX_SIZE; i++) {
      leds.setRow(0, i, figure[i] >> offset);
    }
}

void draw(int row, int value) {
  leds.setRow(0, row, value);
}

